version: "3.8"

services:
  db:
    image: postgres:15
    container_name: db_app
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d category_db" ]
      interval: 5s   # Периодичность проверки — каждые 5 секунд
      timeout: 3s    # Время ожидания — 3 секунды
      retries: 5     # После 5 неудачных попыток контейнер будет признан нездоровым
      start_period: 10s  # Docker будет ожидать 10 секунд перед первой проверкой

  work_app:
    build:
      context: .
    env_file:
      - .env
    container_name: work_app
    command: >
      bash -c "
      alembic stamp head &&
      alembic revision --autogenerate -m 'upgrade_new' &&
      alembic upgrade head &&
      gunicorn src.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000
      "
    ports:
      - 1111:8000
    depends_on:
      db:
        condition: service_healthy  # Ждём, пока база данных не станет здоровой
    environment:
      DB_HOST: db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - .:/project_dir

  zookeeper:
      image: wurstmeister/zookeeper:latest
      container_name: zookeeper
      ports:
        - "2181:2181"
      healthcheck:
        test: [ "CMD", "nc", "-z", "localhost", "2181" ]
        interval: 30s
        retries: 3
        timeout: 10s

  kafka:
      container_name: kafka
      image: wurstmeister/kafka:latest
      ports:
        - "9092:9092"
      environment:
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_CREATE_TOPICS: "test_topic:1:1"
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      depends_on:
        - zookeeper
      healthcheck:
        test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "kafka:9092" ]
        interval: 30s
        retries: 3
        timeout: 10s

  kafka_consumer:
    build:
      context: .
    container_name: kafka_consumer
    depends_on:
      kafka:
        condition: service_healthy  # Ждём, пока Kafka не станет здоровой
      zookeeper:
        condition: service_healthy  # Убедимся, что Zookeeper тоже здоров
    command: python -m src.kafka_consumers.test_topic
    env_file:
      - .env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      TOPIC: test_topic
      DB_HOST: db


